
> angular-electron@11.2.0 electron:local D:\git\angular-electron
> npm run build:dev && electron .


> angular-electron@11.2.0 build:dev D:\git\angular-electron
> npm run build -- -c dev


> angular-electron@11.2.0 build D:\git\angular-electron
> npm run electron:serve-tsc && ng build --base-href ./ "-c" "dev"


> angular-electron@11.2.0 electron:serve-tsc D:\git\angular-electron
> tsc -p tsconfig.serve.json


Initial Chunk Files | Names         |  Raw Size
main.js             | main          |   5.35 MB |
styles.css          | styles        | 230.29 kB |
polyfills.js        | polyfills     | 109.33 kB |
runtime.js          | runtime       |   6.38 kB |

| Initial Total |   5.68 MB

Build at: 2022-10-24T15:11:29.795Z - Hash: 11f7134f12360a13 - Time: 11863ms

Executing (default): PRAGMA foreign_keys = OFF
Executing (default): PRAGMA foreign_keys = OFF
Executing (default): PRAGMA foreign_keys = OFF
Executing (default): PRAGMA foreign_keys = OFF
Executing (default): PRAGMA foreign_keys = OFF
Executing (default): PRAGMA foreign_keys = OFF
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='players';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='players';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='players';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='players';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='players';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='players';
Executing (default): PRAGMA INDEX_LIST(`players`)
Executing (default): PRAGMA INDEX_LIST(`players`)
Executing (default): PRAGMA INDEX_LIST(`players`)
Executing (default): PRAGMA INDEX_LIST(`players`)
Executing (default): PRAGMA INDEX_LIST(`players`)
Executing (default): PRAGMA INDEX_LIST(`players`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_players_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_players_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_players_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_players_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_players_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_players_1`)
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='rounds';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='rounds';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='rounds';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='rounds';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='rounds';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='rounds';
Executing (default): PRAGMA INDEX_LIST(`rounds`)
Executing (default): PRAGMA INDEX_LIST(`rounds`)
Executing (default): PRAGMA INDEX_LIST(`rounds`)
Executing (default): PRAGMA INDEX_LIST(`rounds`)
Executing (default): PRAGMA INDEX_LIST(`rounds`)
Executing (default): PRAGMA INDEX_LIST(`rounds`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_rounds_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_rounds_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_rounds_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_rounds_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_rounds_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_rounds_1`)
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='standings';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='standings';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='standings';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='standings';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='standings';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='standings';
Executing (default): PRAGMA INDEX_LIST(`standings`)
Executing (default): PRAGMA INDEX_LIST(`standings`)
Executing (default): PRAGMA INDEX_LIST(`standings`)
Executing (default): PRAGMA INDEX_LIST(`standings`)
Executing (default): PRAGMA INDEX_LIST(`standings`)
Executing (default): PRAGMA INDEX_LIST(`standings`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_standings_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_standings_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_standings_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_standings_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_standings_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_standings_1`)
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='tournaments';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='tournaments';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='tournaments';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='tournaments';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='tournaments';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='tournaments';
Executing (default): PRAGMA INDEX_LIST(`tournaments`)
Executing (default): PRAGMA INDEX_LIST(`tournaments`)
Executing (default): PRAGMA INDEX_LIST(`tournaments`)
Executing (default): PRAGMA INDEX_LIST(`tournaments`)
Executing (default): PRAGMA INDEX_LIST(`tournaments`)
Executing (default): PRAGMA INDEX_LIST(`tournaments`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_tournaments_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_tournaments_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_tournaments_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_tournaments_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_tournaments_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_tournaments_1`)
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='events';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='events';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='events';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='events';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='events';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='events';
Executing (default): PRAGMA INDEX_LIST(`events`)
Executing (default): PRAGMA INDEX_LIST(`events`)
Executing (default): PRAGMA INDEX_LIST(`events`)
Executing (default): PRAGMA INDEX_LIST(`events`)
Executing (default): PRAGMA INDEX_LIST(`events`)
Executing (default): PRAGMA INDEX_LIST(`events`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_events_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_events_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_events_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_events_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_events_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_events_1`)
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='pairings';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='pairings';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='pairings';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='pairings';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='pairings';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='pairings';
Executing (default): PRAGMA INDEX_LIST(`pairings`)
Executing (default): PRAGMA INDEX_LIST(`pairings`)
Executing (default): PRAGMA INDEX_LIST(`pairings`)
Executing (default): PRAGMA INDEX_LIST(`pairings`)
Executing (default): PRAGMA INDEX_LIST(`pairings`)
Executing (default): PRAGMA INDEX_LIST(`pairings`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_pairings_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_pairings_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_pairings_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_pairings_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_pairings_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_pairings_1`)
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='categories';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='categories';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='categories';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='categories';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='categories';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='categories';
Executing (default): PRAGMA INDEX_LIST(`categories`)
Executing (default): PRAGMA INDEX_LIST(`categories`)
Executing (default): PRAGMA INDEX_LIST(`categories`)
Executing (default): PRAGMA INDEX_LIST(`categories`)
Executing (default): PRAGMA INDEX_LIST(`categories`)
Executing (default): PRAGMA INDEX_LIST(`categories`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_categories_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_categories_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_categories_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_categories_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_categories_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_categories_1`)
Executing (default): PRAGMA foreign_keys = ON
Executing (default): PRAGMA foreign_keys = ON
Executing (default): PRAGMA foreign_keys = ON
Executing (default): PRAGMA foreign_keys = ON
Executing (default): PRAGMA foreign_keys = ON
Executing (default): PRAGMA foreign_keys = ON
Executing (default): SELECT `id`, `uuid`, `name`, `date_start`, `date_finish`, `time_control`, `place`, `createdAt`, `updatedAt` FROM `events` AS `events`;
2022-01-01
2022-10-20
2022-01-02
2022-01-03
Executing (default): SELECT `id`, `uuid`, `name`, `date_start`, `date_finish`, `time_control`, `place`, `createdAt`, `updatedAt` FROM `events` AS `events` WHERE `events`.`uuid` = '60b9ac4e-e606-4042-867f-8b00c1e400b3';
2022-01-02
2022-01-03
Executing (default): SELECT `id`, `uuid`, `name`, `tournament_type`, `rounds_number`, `ordering_sequence`, `createdAt`, `updatedAt`, `eventUuid` FROM `tournaments` AS `tournaments` WHERE `tournaments`.`eventUuid` = '60b9ac4e-e606-4042-867f-8b00c1e400b3';
Executing (default): SELECT `id`, `uuid`, `name`, `tournament_type`, `rounds_number`, `ordering_sequence`, `createdAt`, `updatedAt`, `eventUuid` FROM `tournaments` AS `tournaments` WHERE `tournaments`.`uuid` = '39f81f6e-d030-4d3c-9e11-387910c53e86';
Executing (default): SELECT `id`, `uuid`, `name`, `start_number`, `borndate`, `city`, `club`, `int_id`, `int_rating`, `xz_id`, `xz_rating`, `nat_id`, `nat_rating`, `fide_id`, `fide_rating`, `temporary_tournament_info`, `createdAt`, `updatedAt`, `tournamentUuid`, `categoryUuid`, `standingUuid` FROM `players` AS `players` WHERE `players`.`tournamentUuid` = '39f81f6e-d030-4d3c-9e11-387910c53e86' ORDER BY `players`.`start_number` ASC, `players`.`name` ASC;
Executing (default): SELECT `id`, `uuid`, `name`, `abbr`, `createdAt`, `updatedAt`, `tournamentUuid` FROM `categories` AS `categories` WHERE `categories`.`tournamentUuid` = '39f81f6e-d030-4d3c-9e11-387910c53e86';
Error
    at Database.<anonymous> (D:\git\angular-electron\app\node_modules\sequelize\lib\dialects\sqlite\query.js:179:27)
    at D:\git\angular-electron\app\node_modules\sequelize\lib\dialects\sqlite\query.js:177:50
    at new Promise (<anonymous>)
    at Query.run (D:\git\angular-electron\app\node_modules\sequelize\lib\dialects\sqlite\query.js:177:12)
    at D:\git\angular-electron\app\node_modules\sequelize\lib\sequelize.js:314:28
    at async SQLiteQueryInterface.select (D:\git\angular-electron\app\node_modules\sequelize\lib\dialects\abstract\query-interface.js:407:12)
    at async players.findAll (D:\git\angular-electron\app\node_modules\sequelize\lib\model.js:1134:21)
    at async listFromTournament (D:\git\angular-electron\app\controllers\player.controller.js:102:17)
    at async node:electron/js2c/browser_init:193:551 {
  name: 'SequelizeDatabaseError',
  parent: [Error: SQLITE_ERROR: no such column: standingUuid] {
    errno: 1,
    code: 'SQLITE_ERROR',
    sql: "SELECT `id`, `uuid`, `name`, `start_number`, `borndate`, `city`, `club`, `int_id`, `int_rating`, `xz_id`, `xz_rating`, `nat_id`, `nat_rating`, `fide_id`, `fide_rating`, `temporary_tournament_info`, `createdAt`, `updatedAt`, `tournamentUuid`, `categoryUuid`, `standingUuid` FROM `players` AS `players` WHERE `players`.`tournamentUuid` = '39f81f6e-d030-4d3c-9e11-387910c53e86' ORDER BY `players`.`start_number` ASC, `players`.`name` ASC;"
  },
  original: [Error: SQLITE_ERROR: no such column: standingUuid] {
    errno: 1,
    code: 'SQLITE_ERROR',
    sql: "SELECT `id`, `uuid`, `name`, `start_number`, `borndate`, `city`, `club`, `int_id`, `int_rating`, `xz_id`, `xz_rating`, `nat_id`, `nat_rating`, `fide_id`, `fide_rating`, `temporary_tournament_info`, `createdAt`, `updatedAt`, `tournamentUuid`, `categoryUuid`, `standingUuid` FROM `players` AS `players` WHERE `players`.`tournamentUuid` = '39f81f6e-d030-4d3c-9e11-387910c53e86' ORDER BY `players`.`start_number` ASC, `players`.`name` ASC;"
  },
  sql: "SELECT `id`, `uuid`, `name`, `start_number`, `borndate`, `city`, `club`, `int_id`, `int_rating`, `xz_id`, `xz_rating`, `nat_id`, `nat_rating`, `fide_id`, `fide_rating`, `temporary_tournament_info`, `createdAt`, `updatedAt`, `tournamentUuid`, `categoryUuid`, `standingUuid` FROM `players` AS `players` WHERE `players`.`tournamentUuid` = '39f81f6e-d030-4d3c-9e11-387910c53e86' ORDER BY `players`.`start_number` ASC, `players`.`name` ASC;",
  parameters: {}
}
getLastRound
Executing (default): SELECT `id`, `uuid`, `number`, `createdAt`, `updatedAt`, `tournamentUuid` FROM `rounds` AS `rounds` WHERE `rounds`.`tournamentUuid` = '39f81f6e-d030-4d3c-9e11-387910c53e86' ORDER BY `rounds`.`number` DESC LIMIT 1;
rounds {
  dataValues: {
    id: null,
    uuid: '005fba86-00af-4a50-be4b-1c354a255924',
    number: 1,
    createdAt: 2022-10-24T14:30:17.444Z,
    updatedAt: 2022-10-24T14:30:17.444Z,
    tournamentUuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
  },
  _previousDataValues: {
    id: null,
    uuid: '005fba86-00af-4a50-be4b-1c354a255924',
    number: 1,
    createdAt: 2022-10-24T14:30:17.444Z,
    updatedAt: 2022-10-24T14:30:17.444Z,
    tournamentUuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
  },
  uniqno: 1,
  _changed: Set(0) {},
  _options: {
    isNewRecord: false,
    _schema: null,
    _schemaDelimiter: '',
    raw: true,
    attributes: [
      'id',
      'uuid',
      'number',
      'createdAt',
      'updatedAt',
      'tournamentUuid'
    ]
  },
  isNewRecord: false
}
Last Round: 
{
  uuid: '005fba86-00af-4a50-be4b-1c354a255924',
  number: 1,
  tournament_uuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
}
Executing (default): SELECT `id`, `uuid`, `name`, `tournament_type`, `rounds_number`, `ordering_sequence`, `createdAt`, `updatedAt`, `eventUuid` FROM `tournaments` AS `tournaments` WHERE `tournaments`.`uuid` = '39f81f6e-d030-4d3c-9e11-387910c53e86';
getLastRound
Executing (default): SELECT `id`, `uuid`, `number`, `createdAt`, `updatedAt`, `tournamentUuid` FROM `rounds` AS `rounds` WHERE `rounds`.`tournamentUuid` = '39f81f6e-d030-4d3c-9e11-387910c53e86' ORDER BY `rounds`.`number` DESC LIMIT 1;
rounds {
  dataValues: {
    id: null,
    uuid: '005fba86-00af-4a50-be4b-1c354a255924',
    number: 1,
    createdAt: 2022-10-24T14:30:17.444Z,
    updatedAt: 2022-10-24T14:30:17.444Z,
    tournamentUuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
  },
  _previousDataValues: {
    id: null,
    uuid: '005fba86-00af-4a50-be4b-1c354a255924',
    number: 1,
    createdAt: 2022-10-24T14:30:17.444Z,
    updatedAt: 2022-10-24T14:30:17.444Z,
    tournamentUuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
  },
  uniqno: 1,
  _changed: Set(0) {},
  _options: {
    isNewRecord: false,
    _schema: null,
    _schemaDelimiter: '',
    raw: true,
    attributes: [
      'id',
      'uuid',
      'number',
      'createdAt',
      'updatedAt',
      'tournamentUuid'
    ]
  },
  isNewRecord: false
}
Last Round: 
{
  uuid: '005fba86-00af-4a50-be4b-1c354a255924',
  number: 1,
  tournament_uuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
}
Executing (default): SELECT `rounds`.`id`, `rounds`.`uuid`, `rounds`.`number`, `rounds`.`createdAt`, `rounds`.`updatedAt`, `rounds`.`tournamentUuid`, `tournament`.`id` AS `tournament.id`, `tournament`.`uuid` AS `tournament.uuid`, `tournament`.`name` AS `tournament.name`, `tournament`.`tournament_type` AS `tournament.tournament_type`, `tournament`.`rounds_number` AS `tournament.rounds_number`, `tournament`.`ordering_sequence` AS `tournament.ordering_sequence`, `tournament`.`createdAt` AS `tournament.createdAt`, `tournament`.`updatedAt` AS `tournament.updatedAt`, `tournament`.`eventUuid` AS `tournament.eventUuid` FROM `rounds` AS `rounds` LEFT OUTER JOIN `tournaments` AS `tournament` ON `rounds`.`tournamentUuid` = `tournament`.`uuid` WHERE `rounds`.`uuid` = '005fba86-00af-4a50-be4b-1c354a255924';
Executing (default): SELECT `rounds`.`id`, `rounds`.`uuid`, `rounds`.`number`, `rounds`.`createdAt`, `rounds`.`updatedAt`, `rounds`.`tournamentUuid`, `tournament`.`id` AS `tournament.id`, `tournament`.`uuid` AS `tournament.uuid`, `tournament`.`name` AS `tournament.name`, `tournament`.`tournament_type` AS `tournament.tournament_type`, `tournament`.`rounds_number` AS `tournament.rounds_number`, `tournament`.`ordering_sequence` AS `tournament.ordering_sequence`, `tournament`.`createdAt` AS `tournament.createdAt`, `tournament`.`updatedAt` AS `tournament.updatedAt`, `tournament`.`eventUuid` AS `tournament.eventUuid` FROM `rounds` AS `rounds` LEFT OUTER JOIN `tournaments` AS `tournament` ON `rounds`.`tournamentUuid` = `tournament`.`uuid` WHERE `rounds`.`uuid` = '005fba86-00af-4a50-be4b-1c354a255924';
{
  uuid: '005fba86-00af-4a50-be4b-1c354a255924',
  number: 1,
  tournament_uuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
}
TypeError: Cannot read properties of undefined (reading 'uuid')
    at Object.updateStandings (D:\git\angular-electron\app\controllers\round.controller.js:540:87)
    at async listFromRound (D:\git\angular-electron\app\controllers\pairing.controller.js:102:44)
    at async Object.isAllPairingsWithResult (D:\git\angular-electron\app\controllers\pairing.controller.js:338:25)
    at async canGenerateNewRound (D:\git\angular-electron\app\controllers\round.controller.js:516:49)
    at async node:electron/js2c/browser_init:193:551
Executing (default): SELECT `id`, `uuid`, `name`, `tournament_type`, `rounds_number`, `ordering_sequence`, `createdAt`, `updatedAt`, `eventUuid` FROM `tournaments` AS `tournaments` WHERE `tournaments`.`uuid` = '39f81f6e-d030-4d3c-9e11-387910c53e86';
Executing (default): SELECT `id`, `uuid`, `number`, `createdAt`, `updatedAt`, `tournamentUuid` FROM `rounds` AS `rounds` WHERE `rounds`.`tournamentUuid` = '39f81f6e-d030-4d3c-9e11-387910c53e86' AND `rounds`.`number` = 1 LIMIT 1;
Executing (default): SELECT `id`, `uuid`, `name`, `tournament_type`, `rounds_number`, `ordering_sequence`, `createdAt`, `updatedAt`, `eventUuid` FROM `tournaments` AS `tournaments` WHERE `tournaments`.`uuid` = '39f81f6e-d030-4d3c-9e11-387910c53e86';
getLastRound
Executing (default): SELECT `id`, `uuid`, `number`, `createdAt`, `updatedAt`, `tournamentUuid` FROM `rounds` AS `rounds` WHERE `rounds`.`tournamentUuid` = '39f81f6e-d030-4d3c-9e11-387910c53e86' ORDER BY `rounds`.`number` DESC LIMIT 1;
getLastRound
Executing (default): SELECT `id`, `uuid`, `number`, `createdAt`, `updatedAt`, `tournamentUuid` FROM `rounds` AS `rounds` WHERE `rounds`.`tournamentUuid` = '39f81f6e-d030-4d3c-9e11-387910c53e86' ORDER BY `rounds`.`number` DESC LIMIT 1;
Executing (default): SELECT `rounds`.`id`, `rounds`.`uuid`, `rounds`.`number`, `rounds`.`createdAt`, `rounds`.`updatedAt`, `rounds`.`tournamentUuid`, `tournament`.`id` AS `tournament.id`, `tournament`.`uuid` AS `tournament.uuid`, `tournament`.`name` AS `tournament.name`, `tournament`.`tournament_type` AS `tournament.tournament_type`, `tournament`.`rounds_number` AS `tournament.rounds_number`, `tournament`.`ordering_sequence` AS `tournament.ordering_sequence`, `tournament`.`createdAt` AS `tournament.createdAt`, `tournament`.`updatedAt` AS `tournament.updatedAt`, `tournament`.`eventUuid` AS `tournament.eventUuid` FROM `rounds` AS `rounds` LEFT OUTER JOIN `tournaments` AS `tournament` ON `rounds`.`tournamentUuid` = `tournament`.`uuid` WHERE `rounds`.`uuid` = '005fba86-00af-4a50-be4b-1c354a255924';
rounds {
  dataValues: {
    id: null,
    uuid: '005fba86-00af-4a50-be4b-1c354a255924',
    number: 1,
    createdAt: 2022-10-24T14:30:17.444Z,
    updatedAt: 2022-10-24T14:30:17.444Z,
    tournamentUuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
  },
  _previousDataValues: {
    id: null,
    uuid: '005fba86-00af-4a50-be4b-1c354a255924',
    number: 1,
    createdAt: 2022-10-24T14:30:17.444Z,
    updatedAt: 2022-10-24T14:30:17.444Z,
    tournamentUuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
  },
  uniqno: 1,
  _changed: Set(0) {},
  _options: {
    isNewRecord: false,
    _schema: null,
    _schemaDelimiter: '',
    raw: true,
    attributes: [
      'id',
      'uuid',
      'number',
      'createdAt',
      'updatedAt',
      'tournamentUuid'
    ]
  },
  isNewRecord: false
}
Last Round: 
{
  uuid: '005fba86-00af-4a50-be4b-1c354a255924',
  number: 1,
  tournament_uuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
}
Executing (default): SELECT `rounds`.`id`, `rounds`.`uuid`, `rounds`.`number`, `rounds`.`createdAt`, `rounds`.`updatedAt`, `rounds`.`tournamentUuid`, `tournament`.`id` AS `tournament.id`, `tournament`.`uuid` AS `tournament.uuid`, `tournament`.`name` AS `tournament.name`, `tournament`.`tournament_type` AS `tournament.tournament_type`, `tournament`.`rounds_number` AS `tournament.rounds_number`, `tournament`.`ordering_sequence` AS `tournament.ordering_sequence`, `tournament`.`createdAt` AS `tournament.createdAt`, `tournament`.`updatedAt` AS `tournament.updatedAt`, `tournament`.`eventUuid` AS `tournament.eventUuid` FROM `rounds` AS `rounds` LEFT OUTER JOIN `tournaments` AS `tournament` ON `rounds`.`tournamentUuid` = `tournament`.`uuid` WHERE `rounds`.`uuid` = '005fba86-00af-4a50-be4b-1c354a255924';
Executing (default): SELECT `rounds`.`id`, `rounds`.`uuid`, `rounds`.`number`, `rounds`.`createdAt`, `rounds`.`updatedAt`, `rounds`.`tournamentUuid`, `tournament`.`id` AS `tournament.id`, `tournament`.`uuid` AS `tournament.uuid`, `tournament`.`name` AS `tournament.name`, `tournament`.`tournament_type` AS `tournament.tournament_type`, `tournament`.`rounds_number` AS `tournament.rounds_number`, `tournament`.`ordering_sequence` AS `tournament.ordering_sequence`, `tournament`.`createdAt` AS `tournament.createdAt`, `tournament`.`updatedAt` AS `tournament.updatedAt`, `tournament`.`eventUuid` AS `tournament.eventUuid` FROM `rounds` AS `rounds` LEFT OUTER JOIN `tournaments` AS `tournament` ON `rounds`.`tournamentUuid` = `tournament`.`uuid` WHERE `rounds`.`uuid` = '005fba86-00af-4a50-be4b-1c354a255924';
rounds {
  dataValues: {
    id: null,
    uuid: '005fba86-00af-4a50-be4b-1c354a255924',
    number: 1,
    createdAt: 2022-10-24T14:30:17.444Z,
    updatedAt: 2022-10-24T14:30:17.444Z,
    tournamentUuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
  },
  _previousDataValues: {
    id: null,
    uuid: '005fba86-00af-4a50-be4b-1c354a255924',
    number: 1,
    createdAt: 2022-10-24T14:30:17.444Z,
    updatedAt: 2022-10-24T14:30:17.444Z,
    tournamentUuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
  },
  uniqno: 1,
  _changed: Set(0) {},
  _options: {
    isNewRecord: false,
    _schema: null,
    _schemaDelimiter: '',
    raw: true,
    attributes: [
      'id',
      'uuid',
      'number',
      'createdAt',
      'updatedAt',
      'tournamentUuid'
    ]
  },
  isNewRecord: false
}
Last Round: 
{
  uuid: '005fba86-00af-4a50-be4b-1c354a255924',
  number: 1,
  tournament_uuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
}
Executing (default): SELECT `rounds`.`id`, `rounds`.`uuid`, `rounds`.`number`, `rounds`.`createdAt`, `rounds`.`updatedAt`, `rounds`.`tournamentUuid`, `tournament`.`id` AS `tournament.id`, `tournament`.`uuid` AS `tournament.uuid`, `tournament`.`name` AS `tournament.name`, `tournament`.`tournament_type` AS `tournament.tournament_type`, `tournament`.`rounds_number` AS `tournament.rounds_number`, `tournament`.`ordering_sequence` AS `tournament.ordering_sequence`, `tournament`.`createdAt` AS `tournament.createdAt`, `tournament`.`updatedAt` AS `tournament.updatedAt`, `tournament`.`eventUuid` AS `tournament.eventUuid` FROM `rounds` AS `rounds` LEFT OUTER JOIN `tournaments` AS `tournament` ON `rounds`.`tournamentUuid` = `tournament`.`uuid` WHERE `rounds`.`uuid` = '005fba86-00af-4a50-be4b-1c354a255924';
Executing (default): SELECT `rounds`.`id`, `rounds`.`uuid`, `rounds`.`number`, `rounds`.`createdAt`, `rounds`.`updatedAt`, `rounds`.`tournamentUuid`, `tournament`.`id` AS `tournament.id`, `tournament`.`uuid` AS `tournament.uuid`, `tournament`.`name` AS `tournament.name`, `tournament`.`tournament_type` AS `tournament.tournament_type`, `tournament`.`rounds_number` AS `tournament.rounds_number`, `tournament`.`ordering_sequence` AS `tournament.ordering_sequence`, `tournament`.`createdAt` AS `tournament.createdAt`, `tournament`.`updatedAt` AS `tournament.updatedAt`, `tournament`.`eventUuid` AS `tournament.eventUuid` FROM `rounds` AS `rounds` LEFT OUTER JOIN `tournaments` AS `tournament` ON `rounds`.`tournamentUuid` = `tournament`.`uuid` WHERE `rounds`.`uuid` = '005fba86-00af-4a50-be4b-1c354a255924';
{
  uuid: '005fba86-00af-4a50-be4b-1c354a255924',
  number: 1,
  tournament_uuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
}
TypeError: Cannot read properties of undefined (reading 'uuid')
    at Object.updateStandings (D:\git\angular-electron\app\controllers\round.controller.js:540:87)
    at async listFromRound (D:\git\angular-electron\app\controllers\pairing.controller.js:102:44)
    at async node:electron/js2c/browser_init:193:551
Executing (default): SELECT `rounds`.`id`, `rounds`.`uuid`, `rounds`.`number`, `rounds`.`createdAt`, `rounds`.`updatedAt`, `rounds`.`tournamentUuid`, `tournament`.`id` AS `tournament.id`, `tournament`.`uuid` AS `tournament.uuid`, `tournament`.`name` AS `tournament.name`, `tournament`.`tournament_type` AS `tournament.tournament_type`, `tournament`.`rounds_number` AS `tournament.rounds_number`, `tournament`.`ordering_sequence` AS `tournament.ordering_sequence`, `tournament`.`createdAt` AS `tournament.createdAt`, `tournament`.`updatedAt` AS `tournament.updatedAt`, `tournament`.`eventUuid` AS `tournament.eventUuid` FROM `rounds` AS `rounds` LEFT OUTER JOIN `tournaments` AS `tournament` ON `rounds`.`tournamentUuid` = `tournament`.`uuid` WHERE `rounds`.`uuid` = '005fba86-00af-4a50-be4b-1c354a255924';
{
  uuid: '005fba86-00af-4a50-be4b-1c354a255924',
  number: 1,
  tournament_uuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
}
TypeError: Cannot read properties of undefined (reading 'uuid')
    at Object.updateStandings (D:\git\angular-electron\app\controllers\round.controller.js:540:87)
    at async listFromRound (D:\git\angular-electron\app\controllers\pairing.controller.js:102:44)
    at async Object.isAllPairingsWithResult (D:\git\angular-electron\app\controllers\pairing.controller.js:338:25)
    at async canGenerateNewRound (D:\git\angular-electron\app\controllers\round.controller.js:516:49)
    at async node:electron/js2c/browser_init:193:551
{
  uuid: '005fba86-00af-4a50-be4b-1c354a255924',
  number: 1,
  tournament_uuid: '39f81f6e-d030-4d3c-9e11-387910c53e86'
}
TypeError: Cannot read properties of undefined (reading 'uuid')
    at Object.updateStandings (D:\git\angular-electron\app\controllers\round.controller.js:540:87)
    at async listFromRound (D:\git\angular-electron\app\controllers\pairing.controller.js:102:44)
    at async Object.isAllPairingsWithResult (D:\git\angular-electron\app\controllers\pairing.controller.js:338:25)
    at async canGenerateNewRound (D:\git\angular-electron\app\controllers\round.controller.js:516:49)
    at async node:electron/js2c/browser_init:193:551
